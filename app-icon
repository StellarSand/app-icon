#!/usr/bin/env bash

# Copyright (c) 2023 the-weird-aquarian

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

chkPackage(){
    if ! (command -v "$1" > /dev/null)
    then
        echo -e "\n$1 package does not exist. Please install it first and try again."
        echo -e "Exiting script ...\n"
        exit 1
    fi
}

successFail() {
    if [ $? -eq 0 ]
    then
        echo -e "Done.\n"
    else
        echo -e "Some error occurred performing the task.\n"
        exit 1
    fi
}

chkResponseCode() {
    response_code=$(curl -s -o /dev/null -w "%{http_code}" "$1")
     [[ "$response_code" != 404 ]]
}

appExists() {
    google_play_url="https://play.google.com/store/apps/details?id="
    fdroid_url="https://f-droid.org/en/packages/"

    if chkResponseCode "$google_play_url$1/"
    then
        is_on_google_play=true
        url="$google_play_url$1/"
    elif chkResponseCode "$fdroid_url$1/"
    then
        is_on_fdroid=true
        url="$fdroid_url$1/"
    else
        echo -e "$1 doesn't exist on Google Play and F-Droid.\n"
    fi
}

getIconFromGooglePlay() {
    icon_url=$(while read -r
                do
                    awk 'match($0, /https:\/\/play-lh[^"]*/){print substr($0, RSTART, RLENGTH)}' |
                    head -1
                done < "$scrape_file")
                # $0 => current line
                # /https:\/\/play-lh[^"]*/ => search for https://play-lh
                # [^"] => followed by any char that's not a double quote
                # * => zero or more times
                # RSTART => position of the match
                # RLENGTH => length of match in input string

        if [ "$width" -ne 0 ] && [ "$height" -ne 0 ]
        then
            icon_url="$icon_url=w$width-h$height"
        fi

        if [ -n "$file_path" ]
        then
            echo -e "$1 icon:\n$icon_url" >> "$file_path\n"
        else
            echo -e "$1 icon:\n$icon_url\n"
        fi
}

getIconFromFdroid() {
    icon_url=$(while read -r
                do
                    awk -v package="$1" 'match($0, "https://f-droid.org/repo/" package "/en-US/icon_[^\"]*"){print substr($0, RSTART, RLENGTH)}' |
                    head -1
                done < "$scrape_file")
                # $0 => current line
                # https://f-droid.org/repo/" package "/en-US/icon_[^"]*/ => search for https://f-droid.org/repo/package/en-US/icon_
                # [^\"] => followed by any char that's not a double quote
                # * => zero or more times
                # RSTART => position of the match
                # RLENGTH => length of match in input string

        if [ -n "$file_path" ]
        then
            echo -e "$1 icon:\n$icon_url" >> "$file_path\n"
        else
            echo -e "$1 icon:\n$icon_url\n"
        fi
}

# Show usage
usage() {
cat << EOF

Usage:
app-icon <package>
app-icon <package1> <package2> <package3>
app-icon <package> -f <file>

Description:
Get icon URLs of apps from Google Play or F-Droid.

Options:
  -h, --help            Show this help message and exit
  -o, --output          Write output to a specified file
  -p, --parallel        Retrieve multiple icons in parallel (Check note below)
  -W, --Width           Specify a width for the icon (requires -H/--Height too)
  -H, --Height          Specify a height for the icon (requires -W/--Width too)

NOTE:
1. -W/--width and -H/--height options are only valid for Google Play URLs.
2. If -p/--parallel option is used, multiple icon URLs will be retrieved in parallel.
This will be faster, however, it might use a lot of system resources if too many packages are provided.

Examples:
app-icon com.android.twitter
app-icon com.android.twitter com.spotify.music org.telegram.messenger
app-icon com.spotify.music -W 480 -H 960

EOF
}

# Remove temporary files
cleanup() {
    rm "$scrape_file"
}

appIconURL(){
    appExists "$1"
    
    curl -s "$url" > "$scrape_file"

    if $is_on_google_play
    then
        getIconFromGooglePlay "$1"
    elif $is_on_fdroid
    then
        getIconFromFdroid "$1"
    fi

    cleanup
}

chkPackage "curl"
chkPackage "awk"
chkPackage "head"

scrape_file=""
is_on_google_play=false
is_on_fdroid=false
url=""
file_path=""
is_parallel=false
width=0
height=0
has_width=false
has_height=false

if [ $# -eq 0 ]
then
    usage
    exit 0
fi

while [ $# -gt 0 ]
do
    case "$1" in

    -h | --help)
        usage
        exit 0
    ;;

    -o | --output)
        if [ ! -f "$2" ]
        then
            touch "$2"
        fi
        file_path=$2
        shift
    ;;

    -p | --parallel)
        is_parallel=true
    ;;

    -W | --Width)
        if [ "$2" -ne 0 ]
        then
            width=$2
            has_width=true
            shift
        else
            echo -e "\nPlease provide a valid width.\nExiting script ...\n"
            exit 1
        fi
    ;;

    -H | --Height)
        if [ "$2" -ne 0 ]
        then
            height=$2
            has_height=true
            shift
        else
            echo -e "\nPlease provide a valid height.\nExiting script ...\n"
            exit 1
        fi
    ;;

    -*)
        echo -e "\nInvalid option: $1"
        echo -e "Try 'app-icons -h' for more information.\n"
        exit 1
    ;;

    *)
        package_names+=("$1")
    ;;
    
    esac
    shift

done

if $has_width && ! $has_height
then
    echo -e "\n-W/--Width must be used along with -H/--Height."
    echo -e "Exiting script ...\n"
    exit 1
elif $has_height && ! $has_width
then
    echo -e "\n-H/--Height must be used along with -W/--Width."
    echo -e "Exiting script ...\n"
    exit 1
fi

echo -e "\nRetrieving icons ...\n"
for package in "${package_names[@]}"
do
    scrape_file="/tmp/scrape_$package"
    if $is_parallel
    then
        appIconURL "$package" &
    else
        appIconURL "$package"
    fi  
done

if $is_parallel
then
    wait
fi

successFail

exit 0
